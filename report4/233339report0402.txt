/*
 * 科目：ソフトウェア演習Ia
 * 学籍番号・氏名：B233339・多賀一平
 * 課題番号：課題4-2
 * 提出日：2023/5/16
 * 使用Ｃコンパイラ：gcc version 10.3.0-2
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define LIMIT_WORD 45 //最長の英単語の文字数
#define HASHSIZE 8191

typedef struct KeyValueList {
    char *word;
    int count;
    struct KeyValueList *next;
} LIST, *LISTP;

//ハッシュテーブル
LISTP htable[HASHSIZE];

int hash(char *str) {
    int h = 0, n;
    for (n = 0; str[n] !='\0'; n++) {
      h = (h * 137 + str[n]) % HASHSIZE;
    }
    return h;
}

//リストのノードを新規作成
LISTP create_node(char *word, int count, LISTP next) {
    LISTP new_node = (LISTP)malloc(sizeof(LIST));
    if(new_node == NULL) {
        printf("Error\n");
        exit(0);
    }
    new_node->word = strdup(word);
    new_node->count = count;
    new_node->next = next;

    return new_node;
}

void insert_word(char *word) {
    int index = hash(word);
    LISTP list = htable[index];
    LISTP temp = list;
    while(temp) {
        if(strcmp(temp->word, word) == 0) {
            temp->count++;
            return;
        }
        temp = temp->next;
    }
    htable[index] = create_node(word, 1, list);
}

void printTable()
{
    int c=1;
    for(int i = 0; i < HASHSIZE; i++) {
        LISTP temp = htable[i];
        while(temp != NULL) {
            printf("%d: WORD: %s, COUNT: %d\n", c++, temp->word, temp->count);
            temp = temp->next;
        }
    }
}

void deleteMemory( LISTP p )
{
    if ( p != NULL ) {
    deleteMemory( p->next );
    free( p );
    }
    return;
}

int main(void)
{
    FILE *fp;
    fp = fopen("Alice_in_Wonderland.txt", "r"); /* ファイルのオープン */

    if (fp == NULL) {
        printf("¥Cannot open the file.\n");
    } else {
        for(int i = 0; i < HASHSIZE; i++) {
            htable[i] = NULL;
        }
        char word[LIMIT_WORD];
        //fscanfでこの条件下での単語を取得できる
        while (fscanf(fp, "%s", word) != EOF) {
            insert_word(word);
        }
        printTable();
        for(int i = 0; i < HASHSIZE; i++) {
            deleteMemory(htable[i]);
        }
        fclose(fp); /* ファイルのクローズ */
    }
    return 0;
}

/*
実行結果：
gcc 233339report0402.c -Wall -o 233339report0402
233339report0402

1: WORD: say!', COUNT: 1
2: WORD: indeed!', COUNT: 6
3: WORD: promising,, COUNT: 1
4: WORD: Waiting, COUNT: 1
5: WORD: adding,, COUNT: 1
6: WORD: "Turtle, COUNT: 1
7: WORD: you'll, COUNT: 4
8: WORD: now!, COUNT: 1
9: WORD: "There, COUNT: 2
10: WORD: age, COUNT: 2
11: WORD: more, COUNT: 37
12: WORD: we, COUNT: 15
13: WORD: longer!', COUNT: 1
14: WORD: mice, COUNT: 3
15: WORD: dive, COUNT: 1
16: WORD: engaged, COUNT: 1
17: WORD: now,, COUNT: 6
18: WORD: now., COUNT: 1
19: WORD: MINE,', COUNT: 1
20: WORD: do,, COUNT: 7

5292: WORD: `You've, COUNT: 1
5293: WORD: peeping, COUNT: 1
5294: WORD: stupid?', COUNT: 1
5295: WORD: changed, COUNT: 7
5296: WORD: until, COUNT: 4
5297: WORD: just, COUNT: 43
5298: WORD: procession, COUNT: 2
5299: WORD: roses?', COUNT: 1
5300: WORD: panted, COUNT: 1
5301: WORD: myself,', COUNT: 2
5302: WORD: LOVE)., COUNT: 1
5303: WORD: begin.', COUNT: 3
5304: WORD: `Come,, COUNT: 9
5305: WORD: changes, COUNT: 2
5306: WORD: ALICE'S, COUNT: 3
5307: WORD: like?', COUNT: 1
5308: WORD: answer,, COUNT: 1
5309: WORD: powdered, COUNT: 1
5310: WORD: answer., COUNT: 1
5311: WORD: recognised, COUNT: 1
5312: WORD: crossed, COUNT: 3
*/